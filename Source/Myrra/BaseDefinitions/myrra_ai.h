#pragma once
#include "CoreMinimal.h"
#include "AdvMath.h"
#include "myrra_gameplay.h"
#include "myrra_ai.generated.h"

//###################################################################################################################
//пространственно-иерархическое отношение между текущим (Me) и целевым (You) объектом на текущем уровне
//пока вообще отменено и не используется
//###################################################################################################################
UENUM(BlueprintType) enum class EYouAndMe : uint8
{
	Touching,			// цель непосредственно касается нас

	InAir,				// цель или мы в воздухе - нас разделяет воздух, и по опорам цели не достигнуть

	OnTheSameFloor,		// цель на той же опоре, что и мы (монолитный пол или один и тот же сегмент древа)
	OnTheSameTree,		// цель на том же компоненте, что и мы, но на ином сегменте - нужно идти не на прямую а по цепи/поддереву
	OnTheSameStairs,	// цель на том же статик меше, но на разных колизионный телах оного

	ThruMyTree,			// цель на неясной опоре, а мы на дереве, и надо нам пройти свое дерево, чтобы дойти до цели
	ThruMyParentFloor,	// цель на неясной опоре, но, чтобы выйти на эту иерархию, должны спуститься на материнский компонент

	OnChildFloor,		// цель на дочернем компоненте к нашей опоре (оно на почке нашей земли)
	OnTreeChildFloor,	// цель на дочернем компоненте к нашей опоре, но наша опора - древа, к сегменту которого прикреплена опора цели
	OnParentFloor,		// цель на материнском компоненте к нашей опоре (это мы на почке)
	OnParentTree,		//
	OnFloorOblique,		// цель на дочернем компоненте к дочернего компонента нашей опоры
	OnAdjacentTrees,	// мы на дереве, и цель на дереве, но между деревьями есть переходы/перепрыги

	MeFleeingByObstacle,	// мы убегаем от цели, цель всё равно где, но перед нами препятствие и его надо обойти
	MeChasingByObstacle,	// мы стремимся к цели, но перед нами препятствие и его надо обойти

	MeChasingYouUnreachable,// мы стремимся к цели, но цель не достать
	MeBypassingObstacleSlidingToYou,// мы обходим препятствие касаеясь его

	MeClimbingToYouOnTheSameBody,	// мы лезем по одному членику с целью


	OnObstacleToJump,	// цель на препятствии и прямо сейчас можно попробовать прыгнуть
	OnObstacleToClimb,	// цель на препятствии и прямо сейчас можно попробовать карабкаться

	MeFreezingOnBranch,	// мы на дереве, но противник расположен так, что безопаснее остаться на месте
	Unrelated
};


//###################################################################################################################
// результат восприятия новой цели и попытки ее вписать в систему текущих
//###################################################################################################################
UENUM(BlueprintType) enum class EGoalAcceptResult : uint8
{
	AdoptFirst,
	AdoptSecond,
	ReplaceFirst,
	ReplaceSecond,
	ModifyFirst,
	ModifySecond,
	Discard,
	HaveDisappeared
};

//###################################################################################################################
// результат восприятия новой цели 
//###################################################################################################################
UENUM(BlueprintType) enum class EHowSensed : uint8
{
	ROUTINE,		// никак не воспринято, просто рутинно перечитывается - нужно по умолчанию для MesureGoal
	SEEN,			// зрение - ныне не используется, так как по зрению своя система трассировок
	HEARD,			// слух - основной
	PERCUTER,		// ударил кого-то в ходе атаки
	PERCUTED,		// ударен кем-то в ходе атаки
	HURT,			// получил увечье небоевого происхождения
	ATTACKSTART,	// начал атаку
	ATTACKSTRIKE,	// перевел свою атаку в ударную фазу
	ATTACKEND,		// прервал или закончил атаку
	DIED,			// умер
	REMOVE,			// удаляется со сцены, надо удалить и из памяти
	EXPRESSED,		// крикнул или прочим образом вызвал эмоцию
	CALL_OF_HOME	// зов статического объекта, откуда мы появились и где можно исчезнуть от врага
};

//для отладки и не только - результат необходимости противостоять атаке
UENUM() enum class EAttackEscapeResult : uint8
{
	NO_WILL,
	OUT_OF_AREA,			// вне опасной зоны
	NO_DANGER,				// ложная тревога
	NO_RIVAL,				// ложная тревога
	WE_PARRIED,				// активно контратаковали
	WE_PARRIED_BY_SELFACTION,// активно контратаковали
	WE_STARTED_PARRY,		// начали контратаку, но не стукнули
	WE_RETRACTED,			// мы временно отсутпили
	WE_GONNA_SUFFER,		// мы обречены словить эту атаку
	WE_GONNA_RUN,			// мы обречены, но ещё есть время убежать
	WE_KEEP_GOOD_SELFACTION,// наше текущее самодействие достаточно хорошо, чтобы противостоять атаки
	WE_KEEP_GOOD_RELAXACTION,// наше текущее самодействие достаточно хорошо, чтобы противостоять атаки
	TOO_POSITIVE		// атака слишком приятна, чтобы ее избегать
};




//сопосб разрешения трассировки пути к цели
UENUM() enum class ERouteResult : uint8
{
	NoGoal,
	Ignore,
	Towards_Directly,
	Towards_Walkaround,
	Towards_Base,
	GiveUp_For_Unreachable,
	Away_Directly,
	Away_Reckless,
	Away_Walkaround,
	Away_Assist,			// вторичная цель, от которой так же бежим, как от первичной
	Away_Hamper,			// вторичная цель, которая манит и отвлекает от избегания первичной
	Towards_Glance,			// вторичная цель, на которую разве что смотреть, идя к первой
};

//сопосб разрешения трассировки пути к цели
UENUM() enum class EMoveResult : uint8
{
	Walk_To_Goal,
	Walk_To_Goal_TOGGLE,
	Walk_To_Goal_Quietly_Turn,
	Run_To_Goal,
	Crouch_To_Goal,
	Crouch_To_Goal_TOGGLE,
	Crouch_To_Goal_SLOWLY,
	Soar_To_Goal,
	Fly_To_Goal,

	Walk_From_Goal,
	Walk_From_Goal_TOGGLE,
	Walk_From_Goal_Quietly_Turn,
	Run_From_Goal,
	Crouch_From_Goal,
	Crouch_From_Goal_TOGGLE,
	Crouch_From_Goal_SLOWLY,
	Soar_From_Goal,
	Fly_From_Goal,

	NONE
};


